#!/usr/bin/bash

#######################################
# Show a help message.
# Arguments:
#   1: The full path to the default configuration file.
#   2: The full path to the custom configuration file.
#######################################
cmd_help() {
    local -r conf_default_path="$1"
    local -r conf_custom_path="$2"
    sed 's/^    //' <<EOF
    Usage: $(basename "$0") ( en | ru ) <phrase>
        Options:
            -h, --help, help
                Show this help message.

            -d, --download, download ( en | ru )
                Download the specified dictionary.

            -s, --search, search ( en | ru )
                Search the specified dictionary.

            --copy-config
                Create a copy of the default configuration file in your local
                configuration directory.
                '$conf_default_path' -> '$conf_custom_path'

        Examples:

        # View English definition for "a lot".
        zict en a lot

        # View Russian definition for "a lot".
        zict ru a lot

        # Search English phrases like "a lot".
        zict search en a lot

        # Search English phrases like "a lot".
        zict search ru a lot

        # Continue downloading English dictionary after canceling download.
        zict download en

        # Download Russian dictionary.
        zict download ru
EOF

}

#######################################
# Search a phrase in the given zim file and return similar entries.
# Arguments:
#   1:  The zim file in which to search.
#   *: The words to look for in the zim file.
#######################################
cmd_search() {
    local -r zim_file="$1"
    local -r phrase="${*:2}"
    if [[ -z "$zim_file" ]]; then
        exit 1
    fi
    zimsearch "$zim_file" "$phrase" |
        awk '/^score/ { for (i=4; i < NF; ++i) printf $i FS; printf $NF"\n" }'
}

#######################################
# Download a given URL into the given directory without overwriting files.
# Arguments:
#   1: The download directory.
#   2: The download url.
#######################################
cmd_download() {
    local -r download_dir="$1"
    local -r download_url="$2"
    if [[ -z "$download_dir" || -z "$download_url" ]]; then
        exit 1
    fi
    wget --directory-prefix "$download_dir" "$download_url" --continue
}

#######################################
# Direct output to stderr.
# Arguments:
#   *: The strings to print to the console.
#######################################
err() {
    echo "$*" >&2
}

#######################################
# Copy the gieven file to the given destination without overwriting any files.
# Arguments:
#   1: The full path to the source file.
#   2: The full path to the destination file.
#######################################
cmd_copy_config() {
    local -r source_file="$1"
    local -r destination_file="$2"
    if [[ -z "$source_file" || -z "$destination_file" ]]; then
        exit 1
    fi
    mkdir --parents --verbose "$(dirname "$destination_file")"
    cp --no-clobber --verbose "$source_file" "$destination_file"
}

#######################################
# Return the path to the first existing file. Error if none exist.
# Arguments:
#   +: The file paths.
#######################################
get_first_valid_file() {
    for file in "${@}"; do
        if [[ -f "$file" ]]; then
            echo "$file"
            return
        fi
    done
    err "Error: Files do not exist:"
    err "$*"
    exit 1
}

#######################################
# View the entry definition in the given zim file.
# Arguments:
#   1: The zim file from which to retrieve the definition.
#   *: The phrase to load.
#######################################
view() {
    local -r zim_file="$1"
    local -r phrase="${*:2}"
    if [[ -z "$zim_file" || -z "$phrase" ]]; then
        exit 1
    fi
    # Store current keyboard layout: w3m controls work with a Latin alphabet.
    local -r layout="$(setxkbmap -query | awk '/layout:/ { print $2 }')"
    # Set keyboard to English so that navigation controls work in w3m.
    setxkbmap -layout us
    # Display definition. Replace all phrase spaces with underscores.
    zimdump show --url="${phrase// /_}" "$zim_file" | w3m -T text/html
    # Restore previous keyboard layout.
    setxkbmap -layout "$layout"
}

#######################################
# View the definition for a phrase in the
# Globals:
#   XDG_CONFIG_HOME: The path to the local configuration folder.
# Arguments:
#   1: The command to execute. See --help.
#   *: The command arguments. See --help.
#######################################
main() {
    # Exit on errors, undefined variables, and unmask pipeline errors.
    set -euo pipefail

    local -r conf_name="zict.bash"
    local -r conf_custom_path="${XDG_CONFIG_HOME:-$HOME/.config}/zict/$conf_name"
    local -r conf_default_path="/etc/zict/$conf_name"
    local -r conf_file="$(
        get_first_valid_file "$conf_custom_path" "$conf_default_path"
    )"

    # shellcheck disable=1090
    source "$conf_file"

    # Verify variables are defined.
    for variable in MY_DOWNLOAD_DIR MY_DOWNLOAD_URLS[@] MY_ZIM_FILES[@]; do
        if [[ ! -v "$variable" ]]; then
            err "Error: Variable $variable not defined in $conf_file."
            exit 1
        fi
    done

    # Rename sourced variables to provide better LSP support.
    local -rn my_download_dir=MY_DOWNLOAD_DIR
    # shellcheck disable=2034
    local -rn my_download_urls_dictionary=MY_DOWNLOAD_URLS
    # shellcheck disable=2034
    local -rn my_zim_files_dictionary=MY_ZIM_FILES

    #######################################
    # Access dictionary values. Missing keys will not generate errors.
    # Arguments:
    #   1: The dictionary name-ref.
    #   2: The dictionary key whose value will be returned.
    #######################################
    array_value() {
        local -nr array="$1"
        local -r key="$2"
        if [[ ! -v array["$key"] ]]; then
            exit 0
        fi
        echo "${array["$key"]}"
    }

    my_zim_files() { array_value my_zim_files_dictionary "$1"; }
    my_download_urls() { array_value my_download_urls_dictionary "$1"; }

    case "$1" in
    -d | --download | download)
        cmd_download "$my_download_dir" "$(my_download_urls "$2")"
        ;;
    -s | --search | search)
        cmd_search "$(my_zim_files "$2")" "${@:3}"
        ;;
    -h | --help | help)
        cmd_help "$conf_default_path" "$conf_custom_path"
        ;;
    --copy-config)
        cmd_copy_config "$conf_default_path" "$conf_custom_path"
        ;;
    *)
        view "$(my_zim_files "${1#--}")" "${@:2}"
        ;;
    esac
}

main "$@"
